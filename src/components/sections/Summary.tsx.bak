import React from 'react';
import styled, { keyframes } from 'styled-components';
import Section from '../ui/Section';
import Container from '../ui/Container';
import Heading from '../ui/Heading';
import { theme } from '../../styles/theme';

interface SummaryProps {
  summary: string;
  vision?: string;
}

// Animation for particles
const float = keyframes`
  0% { transform: translateY(0) rotate(0deg); }
  50% { transform: translateY(-10px) rotate(5deg); }
  100% { transform: translateY(0) rotate(0deg); }
`;

const pulse = keyframes`
  0% { opacity: 0.6; }
  50% { opacity: 1; }
  100% { opacity: 0.6; }
`;

const SummaryWrapper = styled(Section)`
  overflow: hidden;
  padding: ${theme.spacing.huge} 0;
`;

const ContentGrid = styled.div`
  display: grid;
  grid-template-columns: 1fr;
  gap: ${theme.spacing.xl};
  position: relative;
  
  @media (min-width: ${theme.breakpoints.lg}) {
    grid-template-columns: 1fr 1fr;
    gap: ${theme.spacing.xxl};
  }
`;

const Card = styled.div`
  position: relative;
  padding: ${theme.spacing.xl};
  background: ${theme.colors.aiSurface};
  border-radius: ${theme.borderRadius.lg};
  border: 1px solid ${theme.colors.glassBorder};
  backdrop-filter: blur(20px);
  height: 100%;
  display: flex;
  flex-direction: column;
  box-shadow: ${theme.shadows.aiGlow};
  overflow: hidden;
  transition: transform 0.3s ease, box-shadow 0.3s ease;
  
  &:hover {
    transform: translateY(-5px);
    box-shadow: 0 15px 30px rgba(0, 0, 0, 0.2), ${theme.shadows.aiGlow};
  }
`;

const SummaryCard = styled(Card)`
  &::before {
    content: '';
    position: absolute;
    bottom: -30px;
    left: -30px;
    width: 120px;
    height: 120px;
    background: ${theme.colors.aiGlow};
    filter: blur(40px);
    opacity: 0.6;
    border-radius: 50%;
  }
`;

const VisionCard = styled(Card)`
  &::before {
    content: '';
    position: absolute;
    top: -30px;
    right: -30px;
    width: 120px;
    height: 120px;
    background: ${theme.colors.aiAccent};
    filter: blur(50px);
    opacity: 0.6;
    border-radius: 50%;
  }
`;

const CardHeader = styled.div`
  margin-bottom: ${theme.spacing.md};
  position: relative;
`;

const CardContent = styled.div`
  position: relative;
  z-index: 1;
`;

const Text = styled.p`
  font-size: ${theme.typography.sizes.body};
  line-height: ${theme.typography.lineHeights.relaxed};
  color: ${theme.colors.textSecondary};
  margin: 0;
`;

const HighlightedText = styled.span`
  color: ${theme.colors.text};
  font-weight: ${theme.typography.fontWeights.medium};
  position: relative;
  
  &::after {
    content: '';
    position: absolute;
    bottom: 2px;
    left: 0;
    width: 100%;
    height: 4px;
    background: ${theme.colors.aiGlow};
    opacity: 0.5;
    z-index: -1;
    border-radius: ${theme.borderRadius.sm};
  }
`;

const IconElement = styled.div`
  position: absolute;
  z-index: 0;
  
  &.code-bracket {
    top: 30px;
    right: 20px;
    color: ${theme.colors.glassBorder};
    font-family: 'Fira Code', monospace;
    font-size: 100px;
    opacity: 0.1;
    transform: rotate(10deg);
  }
  
  &.quote {
    top: 30px;
    right: 30px;
    color: ${theme.colors.glassBorder};
    font-family: serif;
    font-size: 80px;
    opacity: 0.15;
  }
  
  &.particle {
    position: absolute;
    width: 6px;
    height: 6px;
    background: ${theme.colors.primary};
    border-radius: 50%;
    opacity: 0.5;
    animation: ${float} 4s infinite ease-in-out, ${pulse} 2s infinite;
  }
  
  &.particle-1 {
    top: 40px;
    left: 20%;
    animation-delay: 0s;
  }
  
  &.particle-2 {
    bottom: 60px;
    left: 80%;
    animation-delay: 0.5s;
  }
  
  &.particle-3 {
    top: 80px;
    right: 30%;
    animation-delay: 1s;
  }
`;

// Function to extract key phrases for highlighting
const highlightKeyPhrases = (text: string) => {
  const keyPhrases = [
    'transform abstract concepts',
    'market-ready innovations',
    'expertise spanning',
    'data-first methodology',
    'customer-centric',
    'zero-to-one product creation',
    'transcends traditional boundaries',
    'intuitively human',
    'emerging technologies',
    'invisible infrastructure',
    'tomorrow\'s innovations'
  ];
  
  let processedText = text;
  
  keyPhrases.forEach(phrase => {
    if (text.includes(phrase)) {
      processedText = processedText.replace(
        phrase, 
        `<span class="highlight">${phrase}</span>`
      );
    }
  });
  
  // Split text by highlighted spans
  const parts = processedText.split(/<span class="highlight">|<\/span>/);
  
  return parts.map((part, index) => {
    // Every odd index is a highlighted part
    if (index % 2 === 1) {
      return <HighlightedText key={index}>{part}</HighlightedText>;
    }
    return part;
  });
};

// Create concise versions of the texts
const createConciseText = (text: string, maxLength: number = 300) => {
  if (text.length <= maxLength) return text;
  
  // Try to find a period, question mark, or exclamation point to end at
  const endChars = ['.', '!', '?'];
  let shortenedText = text.substring(0, maxLength);
  
  // Find the last sentence ending within our shortened text
  let lastEndIndex = -1;
  for (const char of endChars) {
    const index = shortenedText.lastIndexOf(char);
    if (index > lastEndIndex) {
      lastEndIndex = index;
    }
  }
  
  return lastEndIndex > 0 ? text.substring(0, lastEndIndex + 1) : shortenedText;
};

const Summary: React.FC<SummaryProps> = ({ summary, vision }: SummaryProps) => {
  const conciseSummary = createConciseText(summary);
  const conciseVision = vision ? createConciseText(vision) : '';
  
  return (
    <SummaryWrapper id="summary" aiPattern>
      <Container>
        <ContentGrid>
          <SummaryCard>
            <CardHeader>
              <Heading 
                level={2} 
                size="title1" 
                marginBottom="small" 
                gradient
                withAccent
              >
                Expertise
              </Heading>
              <IconElement className="code-bracket">{`{`}</IconElement>
              <IconElement className="particle particle-1" />
              <IconElement className="particle particle-2" />
            </CardHeader>
            <CardContent>
              <Text>
                {highlightKeyPhrases(conciseSummary)}
              </Text>
            </CardContent>
          </SummaryCard>
          
          {vision && (
            <VisionCard>
              <CardHeader>
                <Heading 
                  level={2} 
                  size="title1" 
                  marginBottom="small"
                  gradient
                  withAccent
                >
                  Vision
                </Heading>
                <IconElement className="quote">"</IconElement>
                <IconElement className="particle particle-2" />
                <IconElement className="particle particle-3" />
              </CardHeader>
              <CardContent>
                <Text>
                  {highlightKeyPhrases(conciseVision)}
                </Text>
              </CardContent>
            </VisionCard>
          )}
        </ContentGrid>
      </Container>
    </SummaryWrapper>
  );
};

export default Summary; 