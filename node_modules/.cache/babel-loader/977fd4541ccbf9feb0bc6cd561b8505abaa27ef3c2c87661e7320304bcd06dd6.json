{"ast":null,"code":"var _jsxFileName = \"/Users/anupshrestha/Desktop/Cursor/src/styles/ThemeProvider.tsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useState, useContext } from 'react';\nimport { ThemeProvider as StyledThemeProvider } from 'styled-components';\nimport { theme } from './theme';\nimport { GlobalStyles } from './GlobalStyles';\n\n// Create a context for theme toggling (dark/light)\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ThemeContext = /*#__PURE__*/createContext({\n  isDarkMode: true,\n  toggleTheme: () => {}\n});\n\n// Create a hook to use the theme context\nexport const useTheme = () => {\n  _s();\n  return useContext(ThemeContext);\n};\n_s(useTheme, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\nexport const ThemeProvider = ({\n  children\n}) => {\n  _s2();\n  const [isDarkMode, setIsDarkMode] = useState(true);\n  const toggleTheme = () => {\n    setIsDarkMode(!isDarkMode);\n  };\n\n  // For now we'll stick with dark mode only (futuristic)\n  // In a real app, we'd apply a different theme for light mode\n  const currentTheme = theme;\n  return /*#__PURE__*/_jsxDEV(ThemeContext.Provider, {\n    value: {\n      isDarkMode,\n      toggleTheme\n    },\n    children: /*#__PURE__*/_jsxDEV(StyledThemeProvider, {\n      theme: currentTheme,\n      children: [/*#__PURE__*/_jsxDEV(GlobalStyles, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 9\n      }, this), children]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 36,\n    columnNumber: 5\n  }, this);\n};\n_s2(ThemeProvider, \"X19l+XQxfs/NBL0ht2VREPaS1+w=\");\n_c = ThemeProvider;\nexport default ThemeProvider;\nvar _c;\n$RefreshReg$(_c, \"ThemeProvider\");","map":{"version":3,"names":["React","createContext","useState","useContext","ThemeProvider","StyledThemeProvider","theme","GlobalStyles","jsxDEV","_jsxDEV","ThemeContext","isDarkMode","toggleTheme","useTheme","_s","children","_s2","setIsDarkMode","currentTheme","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/anupshrestha/Desktop/Cursor/src/styles/ThemeProvider.tsx"],"sourcesContent":["import React, { createContext, useState, useContext, ReactNode } from 'react';\nimport { ThemeProvider as StyledThemeProvider } from 'styled-components';\nimport { theme } from './theme';\nimport { GlobalStyles } from './GlobalStyles';\n\n// Create a context for theme toggling (dark/light)\ninterface ThemeContextType {\n  isDarkMode: boolean;\n  toggleTheme: () => void;\n}\n\nconst ThemeContext = createContext<ThemeContextType>({\n  isDarkMode: true,\n  toggleTheme: () => {},\n});\n\n// Create a hook to use the theme context\nexport const useTheme = () => useContext(ThemeContext);\n\ninterface ThemeProviderProps {\n  children: ReactNode;\n}\n\nexport const ThemeProvider: React.FC<ThemeProviderProps> = ({ children }: ThemeProviderProps) => {\n  const [isDarkMode, setIsDarkMode] = useState(true);\n\n  const toggleTheme = () => {\n    setIsDarkMode(!isDarkMode);\n  };\n\n  // For now we'll stick with dark mode only (futuristic)\n  // In a real app, we'd apply a different theme for light mode\n  const currentTheme = theme;\n\n  return (\n    <ThemeContext.Provider value={{ isDarkMode, toggleTheme }}>\n      <StyledThemeProvider theme={currentTheme}>\n        <GlobalStyles />\n        {children}\n      </StyledThemeProvider>\n    </ThemeContext.Provider>\n  );\n};\n\nexport default ThemeProvider; "],"mappings":";;;AAAA,OAAOA,KAAK,IAAIC,aAAa,EAAEC,QAAQ,EAAEC,UAAU,QAAmB,OAAO;AAC7E,SAASC,aAAa,IAAIC,mBAAmB,QAAQ,mBAAmB;AACxE,SAASC,KAAK,QAAQ,SAAS;AAC/B,SAASC,YAAY,QAAQ,gBAAgB;;AAE7C;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAMA,MAAMC,YAAY,gBAAGT,aAAa,CAAmB;EACnDU,UAAU,EAAE,IAAI;EAChBC,WAAW,EAAEA,CAAA,KAAM,CAAC;AACtB,CAAC,CAAC;;AAEF;AACA,OAAO,MAAMC,QAAQ,GAAGA,CAAA;EAAAC,EAAA;EAAA,OAAMX,UAAU,CAACO,YAAY,CAAC;AAAA;AAACI,EAAA,CAA1CD,QAAQ;AAMrB,OAAO,MAAMT,aAA2C,GAAGA,CAAC;EAAEW;AAA6B,CAAC,KAAK;EAAAC,GAAA;EAC/F,MAAM,CAACL,UAAU,EAAEM,aAAa,CAAC,GAAGf,QAAQ,CAAC,IAAI,CAAC;EAElD,MAAMU,WAAW,GAAGA,CAAA,KAAM;IACxBK,aAAa,CAAC,CAACN,UAAU,CAAC;EAC5B,CAAC;;EAED;EACA;EACA,MAAMO,YAAY,GAAGZ,KAAK;EAE1B,oBACEG,OAAA,CAACC,YAAY,CAACS,QAAQ;IAACC,KAAK,EAAE;MAAET,UAAU;MAAEC;IAAY,CAAE;IAAAG,QAAA,eACxDN,OAAA,CAACJ,mBAAmB;MAACC,KAAK,EAAEY,YAAa;MAAAH,QAAA,gBACvCN,OAAA,CAACF,YAAY;QAAAc,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC,EACfT,QAAQ;IAAA;MAAAM,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACU;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACD,CAAC;AAE5B,CAAC;AAACR,GAAA,CAnBWZ,aAA2C;AAAAqB,EAAA,GAA3CrB,aAA2C;AAqBxD,eAAeA,aAAa;AAAC,IAAAqB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}